/************** Min Cost Max Flow ****************/
const int Inf=1e9;
struct Edge
{
  int to,cost,cap,flow,back;
};
vector<Edge>Adj[N+2];
void AddEdge(int u,int v,int cost,int cap)
{
  Edge e1={v,cost,cap,0,(int)Adj[v].size()};
  Edge e2={u,-cost,0,0,(int)Adj[u].size()};
  Adj[u].push_back(e1);Adj[v].push_back(e2);
}
pair<int,int>MCMF(int n,int Sr,int Sn)
{
  int flow=0,cost=0;deque<int>q;
  vector<int>state(n+1),from(n+1),from_edge(n+1),d(n+1);
  while(true)
  {
    for(int i=0;i<=n;i++)
      state[i]=2,d[i]=Inf,from[i]=-1;
    state[Sr]=1;q.clear();q.push_back(Sr);d[Sr]=0;
    while(q.size())
    {
      int v=q.front();q.pop_front();state[v]=0;
      for(int i=0;i<Adj[v].size();i++)
      {
        Edge e=Adj[v][i];
        if(e.flow>=e.cap||d[e.to]<=d[v]+e.cost)
          continue;
        int to=e.to;d[to]=d[v]+e.cost;
        from[to]=v;from_edge[to]=i;
        if(state[to]==1)continue;
        if(!state[to]||(!q.empty()&&d[q.front()]>d[to]))
            q.push_front(to);
        else q.push_back(to);
          state[to]=1;
      }
    }
    if(d[Sn]==Inf) break;
    int it=Sn,addflow=Inf;
    while(it!=Sr) 
    {
      int x=Adj[from[it]][from_edge[it]].cap;
      int y=Adj[from[it]][from_edge[it]].flow;
      addflow=min(addflow,x-y);
        it=from[it];
    }
    it=Sn;
    while(it!=Sr) 
    {
      Adj[from[it]][from_edge[it]].flow+=addflow;
      Adj[it][Adj[from[it]][from_edge[it]].back].flow-=addflow;
      cost+=Adj[from[it]][from_edge[it]].cost*addflow;
      it=from[it];
    }
    flow+=addflow;
  }
  return {cost,flow};
}



const int inf=1e9;
struct edge
{
  int a,b,f,c,d;
};
vector<edge>ed;
vector<int>adj[N+2];
void addEdge(int a,int b,int c,int d)
{
  edge e;e={a,b,0,c,d};
  adj[a].push_back(ed.size());
  ed.push_back(e);
 
  e={b,a,0,0,-d};
  adj[b].push_back(ed.size());
  ed.push_back(e);
}
int dis[N+2],inq[N+2],mnf[N+2],pth[N+2];
pair<int,int>spfa(int n)
{
  for(int i=0;i<=n;i++)dis[i]=inf;
  queue<int>q;q.push(sr);
  dis[sr]=0,inq[sr]=1,mnf[sr]=inf;
  while(!q.empty())
  {
    int u=q.front();q.pop();inq[u]=0;
    for(auto id:adj[u])
    {
      int v=ed[id].b;
      if(ed[id].c>ed[id].f&&dis[v]>dis[u]+ed[id].d)
      {
        dis[v]=dis[u]+ed[id].d,pth[v]=id;
        mnf[v]=min(mnf[u],ed[id].c-ed[id].f);
        if(!inq[v])q.push(v),inq[v]=1;
      }
    }
  }
  if(dis[sn]==inf)return {0,0};
  int v=sn;
  while(v!=sr)
  {
    int id=pth[v];
    ed[id].f+=mnf[sn],ed[id^1].f-=mnf[sn];
    v=ed[id].a;
  }
  return {mnf[sn],dis[sn]*mnf[sn]};
}
pair<int,int>mcmf(int n)
{
  int flow=0,cost=0;
  while(true)
  {
    pair<int,int>p=spfa(n);
    if(!p.first)return {flow,cost};
    flow+=p.first,cost+=p.second;
  }
}
///////////////////////////////////////////////////
