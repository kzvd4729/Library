/*************** Convex Hull *******************/
struct point
{
  int x,y;
};
stack<point>Stack;
bool HullCmp(point A,point B)
{
  if(A.x!=B.x)return A.x<B.x;
  return A.y<B.y;
}
long Chk(point a,point b,point c)
{
  b.x-=a.x;b.y-=a.y;c.x-=a.x;c.y-=a.y;
  return b.x*1LL*c.y-c.x*1LL*b.y;
}
void HullBalance(void)
{
  while(Stack.size()>=3)
  {
    point c=Stack.top();Stack.pop();
    point b=Stack.top();Stack.pop();
    point a=Stack.top();
    if(Chk(a,b,c)>0)Stack.push(c);
    else
    {
      Stack.push(b);Stack.push(c);
      break;
    }
  }
}
vector<point>MonotoneChain(vector<point>v)
{
  sort(v.begin(),v.end(),HullCmp);vector<point>hull;
  for(int i=n-1;i>=0;i--)
    Stack.push(v[i]),HullBalance();
  while(Stack.size())
    hull.push_back(Stack.top()),Stack.pop();
  for(int i=0;i<n;i++)
    Stack.push(v[i]),HullBalance();
  Stack.pop();
  while(Stack.size())
    hull.push_back(Stack.top()),Stack.pop();
  return hull;
}
/////////////////////////////////////////////////
