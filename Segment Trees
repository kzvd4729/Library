/************** Segment Tree For Maximum Sum **************/
struct Segment
{
  int lt,rt,mx,al;
}seg[4*N+2];int Sg[N+2];
void Build_Max_Sum(int node,int lo,int hi)
{
  if(lo==hi)
  {
    seg[node]={Sg[lo],Sg[lo],Sg[lo],Sg[lo]};
    return ;
  }
  int md=(lo+hi)/2;
  Build_Max_Sum(node*2,lo,md);Build_Max_Sum(node*2+1,md+1,hi);
  Segment p1=seg[node*2],p2=seg[node*2+1],p;
  p.al=p1.al+p2.al;
  p.lt=max(p1.lt,p1.al+p2.lt);//p.lt=max(p.lt,p.al);
  p.rt=max(p2.rt,p2.al+p1.rt);//p.rt=max(p.rt,p.al);
  p.mx=max(p1.mx,p2.mx);p.mx=max(p.mx,max(p.lt,p.rt));
  p.mx=max(p.mx,p1.rt+p2.lt);seg[node]=p;
}
Segment Qry_Max_Sum(int node,int lo,int hi,int lt,int rt)
{
  if(lo>rt||hi<lt)return {0,0,0,0};
  if(lo>=lt&&hi<=rt)return seg[node];
  int md=(lo+hi)/2;Segment p1,p2,p;
  p1=Qry_Max_Sum(node*2,lo,md,lt,rt);
  p2=Qry_Max_Sum(node*2+1,md+1,hi,lt,rt);
  p.al=p1.al+p2.al;
  p.lt=max(p1.lt,p1.al+p2.lt);//p.lt=max(p.lt,p.al);
  p.rt=max(p2.rt,p2.al+p1.rt);//p.rt=max(p.rt,p.al);
  p.mx=max(p1.mx,p2.mx);p.mx=max(p.mx,max(p.lt,p.rt));
  p.mx=max(p.mx,p1.rt+p2.lt);
  return p;
}
///////////////////////////////////////////////////////


/**************** Kth Number in a Range *****************/
int Pr[N+2],Rt[N+2],R;
struct Persistent
{
  int l,r,sm;
}Seg[N*20+2];
void Add(int node,int lo,int hi,int pnode,int id)
{
  if(lo==hi)
  {
    Seg[node].sm=Seg[pnode].sm+1;return ;
  }
  int md=(lo+hi)/2;
  if(id<=md)
  {
    Seg[node].l=++R;Seg[node].r=Seg[pnode].r;
    Add(Seg[node].l,lo,md,Seg[pnode].l,id);
  }
  else
  {
    Seg[node].r=++R;Seg[node].l=Seg[pnode].l;
    Add(Seg[node].r,md+1,hi,Seg[pnode].r,id);
  }
  Seg[node].sm=Seg[Seg[node].l].sm+Seg[Seg[node].r].sm;
}
int Find(int node,int pnode,int lo,int hi,int kth)
{
  if(lo==hi)return lo;
  int md=(lo+hi)/2;int xx=Seg[Seg[node].l].sm-Seg[Seg[pnode].l].sm;
  if(xx>=kth)return Find(Seg[node].l,Seg[pnode].l,lo,md,kth);
  else return Find(Seg[node].r,Seg[pnode].r,md+1,hi,kth-xx);
}
void Build(int n)
{
  for(int i=1;i<=n;i++)
  {
    Rt[i]=++R;Add(Rt[i],1,n,Rt[i-1],Pr[i]);
  }
  //cout<<Find(Rt[i],Rt[i-1],1,n,k)<<endl;
}
/////////////////////////////////////////////////////
