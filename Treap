/*********************** Treap **********************/
int Tr;
struct Treap
{
  int lt,rt,dt,pri,sz;
}Bst[N+2];
void _Cal(int node)
{
  Bst[node].sz=Bst[Bst[node].lt].sz+Bst[Bst[node].rt].sz+1;
}
pair<int,int>Split_vl(int node,int vl)
{
  if(!node)return {0,0};pair<int,int>p;
  if(Bst[node].dt<=vl)
  {
    p=Split_vl(Bst[node].rt,vl);
    Bst[node].rt=p.first;_Cal(node);
    return {node,p.second};
  }
  else
  {
    p=Split_vl(Bst[node].lt,vl);
    Bst[node].lt=p.second;_Cal(node);
    return {p.first,node};
  }
}
pair<int,int>Split_sz(int node,int ss)
{
  if(!node)return {0,0};pair<int,int>p;
  if(Bst[Bst[node].lt].sz>=ss)
  {
    p=Split_sz(Bst[node].lt,ss);
    Bst[node].lt=p.second;_Cal(node);
    return {p.first,node};
  }
  else
  {
    p=Split_sz(Bst[node].rt,ss-Bst[Bst[node].lt].sz-1);
    Bst[node].rt=p.first;_Cal(node);
    return {node,p.second};
  }
}
int Join(int lt,int rt)
{
  if(!lt)return rt;if(!rt)return lt;
  if(Bst[lt].pri>=Bst[rt].pri)
  {
    Bst[lt].rt=Join(Bst[lt].rt,rt);
    _Cal(lt);return lt;
  }
  else
  {
    Bst[rt].lt=Join(lt,Bst[rt].lt);
    _Cal(rt);return rt;
  }
}
////////////////////////////////////////////////////////
