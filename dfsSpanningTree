struct dfsSpanningTree
{
  vector<int>adj[N+2],tree[N+2];//rooted tree
  vector<pair<int,int> >br;
  vector<int>bkadj[N+2];//for back edge
  /*lca of two back edge node is one of the node*/

  int vis[N+2],lev[N+2];
  dfsSpanningTree()
  {
    br.clear();
    for(int i=0;i<=N;i++)
    {
      adj[i].clear(),tree[i].clear();
      bkadj[i].clear();
      vis[i]=0,lev[i]=0;
    }
  }
  //check for disconnected graph.
  void dfs(int node,int par,int lv)
  {
    vis[node]=1,lev[node]=lv;
    for(auto x:adj[node])
    {
      if(x==par)continue;
      if(vis[x])
      {
        bkadj[node].push_back(x);
        bkadj[x].push_back(node);
      }
      else
      {
        tree[node].push_back(x);
        tree[x].push_back(node);
        dfs(x,node,lv+1);
      }
    }
  }
  int bridge(int node,int par)
  {
    int mn=1e9;
    for(auto x:bkadj[node])
      mn=min(mn,lev[x]);
    for(auto x:tree[node])
    {
      if(x==par)continue;
      mn=min(mn,bridge(x,node));
    }
    if(mn>=lev[node]&&par!=-1)
      br.push_back({par,node});
    return mn;
  }
};
